자바스크립트는 브라우저에 내장되어있음.
node js 브아루저 밖의 javascript
서버를 만들수도 있고 file system을 사용할 수 있다. 브라우저와 상관없이
모든 부분을 자바스크립트로 하고 싶다면 node js를 써야한다.
장고는 이미 엄청나게 큰 도구인것이라 사용하려면 배워야하고 노드 js 는 아무것도 없느 상태에서 이 도구를 가지고 내 마음대로 
사용할 수 있다는 것이 큰 차이점이다.

파이썬은 비동기 언어이기 때문에 실시간 처리를 할  element가 없음. 하지만 node.js 는 이를 가장 잘 활용할 수 있음.
미니멀리스틱 하고 간략한 프로그래밍으로 0에서 부터 시작해서 무한한 활용을 할 수 있다.

페이팔, 넷플릭스, 우버 등등 모두가 node js 를 사용한다.
꼭 한가지 언어로만 백엔드를 만들어야하나? ㄴㄴ
넷플릭스같은 경우는 메인 언어를 하나로 잡고 다른 언어를 여러가지 사용했을 경우일 것.

What is server?
-물리적으로 늘 켜져있는 컴퓨터라는 의미
-인터넷에 연결한 내 접속 요청에 응답하는 컴퓨터 
-private 서버를 직접 집에 둘 수 있음.

what is exress.js?
-우리가 원하는걸 쉽고 빠르게 만들 수 있게 해줌.
-nodejs를 사용하려면 express를 알아야하는데 몇줄로만 서버를 만들 수 있는 것 = 프레임워크

node js다운 받을때 같이 다운 되는 것임.
npm = node package manager

Json은 자바스크립트에서 정보를 담는 방식임.

참고로 express 설치는 한 폴더 안에서 package.json이 있어야 설치가능
없는 곳에서 설치하면 package.json을 읽지 못해서 또 다른곳에 이걸 만들어 버림.

package.json만 있으면 npm install을 콘솔에 치면 자동으로 다운받았던 노드 모듈을 얻을 수 있어서 공유하게 된다면  package,json만 줘도 되는 것임.

.
.
const express = require('express'); //require? : node module을 어디선가 가져오는 거임.
const app = express();

const PORT=4000;

function handleListening() {
    console.log(`Listening on: http://localhost:${PORT}`);
}

app.listen(PORT, handleListening);
>> 위에 코드에서 한것은 express.js 서버를 구축한 것이다.
>> 한 것은 express를 호출하고 node module에서 import 부터 하고 그런 다음 실행만 한 간단한 작업임.
>> 이렇게 app을 만드는 것이다. 그 후 application에 4000번 포트를 listen해 라고 요청한 것.



#nodemon은 새로고침 할때마다 내가 저장한게 적용되도록 해줄 수 있다.

#express에서 middleware이란 처리가 끝날대가지 연결되어있는 그런것임.
어떻게 연결이 될까?  request가 어떻게 시작하는지 -> 시작은 브라우저부터다, 웹사이트에 접속하려고 할때, 그때부터 시작해서 index파일 실행
-> 우리 application이 reoute가 존재하는지 살펴봄 ("/") 이 부분을 살펴보는 것 -> 그럼 오케이 home을 요청하는구나 라고 받아들이고
handlehome이라는 함수를 실행하는것임. 응답을 전송하는거임.

보통은 유저, 마지막 응답사이에 존재하는게 있음 그게 middleware임.
-> express 에서의 모든 함수는 middleware가 될 수 있음.

이 middleware는  유저의 로그인 기록도 체크할 수 있는 것임 마지막 응답을 내보내기전에 확인하는 과정이므로 (중간에서)

ES6라는 것은 모듈이라는게 있어서 우리 코드를 공유할 수 있음. 
다른파일에서의 코드를 가져다가  사용 할 수 있음.

MVC
M-model :  data
V - view :  how does the data look
C - constroller : function that looks for the data

arrow function 에는 implicit return(암시적 리턴)이라는 것이 있음.
arrow function 에서 무언가를 리턴하고 싶다면 이렇게 코드를 작성하면 됨.
lala =() => true;
이 코드는 true를 리턴한다는 의미임.
lala =() => {true};
위 처럼 대괄호를 적어주면 암시적 성격을 잃게 되어서 return을 적어줘야함.
lala =() => {
    return true
};
이렇게..



